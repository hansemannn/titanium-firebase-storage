// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FirebaseStorage
import FirebaseAppCheckInterop
import FirebaseAuthInterop
import FirebaseCore
@_exported import FirebaseStorage
import FirebaseStorageInternal
import Foundation
import Swift
import _Concurrency
@available(iOS 13, tvOS 13, macOS 10.15, macCatalyst 13, watchOS 7, *)
extension FirebaseStorage.StorageReference {
  
  #if compiler(>=5.3) && $AsyncAwait
  public func data(maxSize: Swift.Int64) async throws -> Foundation.Data
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  public func putDataAsync(_ uploadData: Foundation.Data, metadata: FirebaseStorage.StorageMetadata? = nil) async throws -> FirebaseStorage.StorageMetadata
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  public func putFileAsync(from url: Foundation.URL, metadata: FirebaseStorage.StorageMetadata? = nil) async throws -> FirebaseStorage.StorageMetadata
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  public func writeAsync(toFile fileURL: Foundation.URL) async throws -> Foundation.URL
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  public func list(maxResults: Swift.Int64) async throws -> FirebaseStorage.StorageListResult
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  public func list(maxResults: Swift.Int64, pageToken: Swift.String) async throws -> FirebaseStorage.StorageListResult
  #endif

}
extension FirebaseStorage.StorageReference {
  public func downloadURL(completion: @escaping (Swift.Result<Foundation.URL, Swift.Error>) -> Swift.Void)
  @discardableResult
  public func getData(maxSize: Swift.Int64, completion: @escaping (Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void) -> FirebaseStorage.StorageDownloadTask
  public func getMetadata(completion: @escaping (Swift.Result<FirebaseStorage.StorageMetadata, Swift.Error>) -> Swift.Void)
  public func list(maxResults: Swift.Int64, pageToken: Swift.String, completion: @escaping (Swift.Result<FirebaseStorage.StorageListResult, Swift.Error>) -> Swift.Void)
  public func list(maxResults: Swift.Int64, completion: @escaping (Swift.Result<FirebaseStorage.StorageListResult, Swift.Error>) -> Swift.Void)
  public func listAll(completion: @escaping (Swift.Result<FirebaseStorage.StorageListResult, Swift.Error>) -> Swift.Void)
  @discardableResult
  public func putData(_ uploadData: Foundation.Data, metadata: FirebaseStorage.StorageMetadata? = nil, completion: @escaping (Swift.Result<FirebaseStorage.StorageMetadata, Swift.Error>) -> Swift.Void) -> FirebaseStorage.StorageUploadTask
  @discardableResult
  public func putFile(from: Foundation.URL, metadata: FirebaseStorage.StorageMetadata? = nil, completion: @escaping (Swift.Result<FirebaseStorage.StorageMetadata, Swift.Error>) -> Swift.Void) -> FirebaseStorage.StorageUploadTask
  public func updateMetadata(_ metadata: FirebaseStorage.StorageMetadata, completion: @escaping (Swift.Result<FirebaseStorage.StorageMetadata, Swift.Error>) -> Swift.Void)
  @discardableResult
  public func write(toFile: Foundation.URL, completion: @escaping (Swift.Result<Foundation.URL, Swift.Error>) -> Swift.Void) -> FirebaseStorage.StorageDownloadTask
}
@_hasMissingDesignatedInitializers @objc(FIRStorage) open class Storage : ObjectiveC.NSObject {
  @objc(storage) open class func storage() -> FirebaseStorage.Storage
  @objc(storageWithURL:) open class func storage(url: Swift.String) -> FirebaseStorage.Storage
  @objc(storageForApp:) open class func storage(app: FirebaseCore.FirebaseApp) -> FirebaseStorage.Storage
  @objc(storageForApp:URL:) open class func storage(app: FirebaseCore.FirebaseApp, url: Swift.String) -> FirebaseStorage.Storage
  @objc final public let app: FirebaseCore.FirebaseApp
  @objc public var maxUploadRetryTime: Foundation.TimeInterval {
    @objc get
    @objc set(newValue)
  }
  @objc public var maxDownloadRetryTime: Foundation.TimeInterval {
    @objc get
    @objc set(newValue)
  }
  @objc public var maxOperationRetryTime: Foundation.TimeInterval {
    @objc get
    @objc set(newValue)
  }
  @objc public var callbackQueue: Dispatch.DispatchQueue {
    @objc get
    @objc set(newValue)
  }
  @objc open func reference() -> FirebaseStorage.StorageReference
  @objc open func reference(forURL url: Swift.String) -> FirebaseStorage.StorageReference
  @objc(referenceWithPath:) open func reference(withPath path: Swift.String) -> FirebaseStorage.StorageReference
  @objc open func useEmulator(withHost host: Swift.String, port: Swift.Int)
  @objc override dynamic open func copy() -> Any
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(FIRStorageTaskStatus) public enum StorageTaskStatus : Swift.Int {
  case unknown
  case resume
  case progress
  case pause
  case success
  case failure
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(FIRStorageErrorCode) public enum StorageErrorCode : Swift.Int {
  case unknown = -13000
  case objectNotFound = -13010
  case bucketNotFound = -13011
  case projectNotFound = -13012
  case quotaExceeded = -13013
  case unauthenticated = -13020
  case unauthorized = -13021
  case retryLimitExceeded = -13030
  case nonMatchingChecksum = -13031
  case downloadSizeExceeded = -13032
  case cancelled = -13040
  case invalidArgument = -13050
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(FIRStorageDownloadTask) open class StorageDownloadTask : FirebaseStorage.StorageObservableTask, FirebaseStorage.StorageTaskManagement {
  @objc open func enqueue()
  @objc open func pause()
  @objc open func cancel()
  @objc open func resume()
  @objc deinit
}
public let StorageErrorDomain: Swift.String
public enum StorageError : Swift.Error {
  case unknown
  case objectNotFound(Swift.String)
  case bucketNotFound(Swift.String)
  case projectNotFound(Swift.String)
  case quotaExceeded(Swift.String)
  case unauthenticated
  case unauthorized(Swift.String, Swift.String)
  case retryLimitExceeded
  case nonMatchingChecksum
  case downloadSizeExceeded(Swift.Int64, Swift.Int64)
  case cancelled
  case invalidArgument(Swift.String)
  case internalError(Swift.String)
}
@_hasMissingDesignatedInitializers @objc(FIRStorageListResult) open class StorageListResult : ObjectiveC.NSObject {
  @objc final public let prefixes: [FirebaseStorage.StorageReference]
  @objc final public let items: [FirebaseStorage.StorageReference]
  @objc final public let pageToken: Swift.String?
  @objc override dynamic open func copy() -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(FIRStorageMetadata) open class StorageMetadata : ObjectiveC.NSObject {
  @objc final public let bucket: Swift.String
  @objc public var cacheControl: Swift.String? {
    @objc get
    @objc set(newValue)
  }
  @objc public var contentDisposition: Swift.String? {
    @objc get
    @objc set(newValue)
  }
  @objc public var contentEncoding: Swift.String? {
    @objc get
    @objc set(newValue)
  }
  @objc public var contentLanguage: Swift.String? {
    @objc get
    @objc set(newValue)
  }
  @objc public var contentType: Swift.String? {
    @objc get
    @objc set(newValue)
  }
  @objc final public let md5Hash: Swift.String?
  @objc final public let generation: Swift.Int64
  @objc public var customMetadata: [Swift.String : Swift.String]? {
    @objc get
    @objc set(newValue)
  }
  @objc final public let metageneration: Swift.Int64
  @objc final public let name: Swift.String?
  @objc final public let path: Swift.String?
  @objc final public let size: Swift.Int64
  @objc final public let timeCreated: Foundation.Date?
  @objc final public let updated: Foundation.Date?
  @objc final public let storageReference: FirebaseStorage.StorageReference?
  @objc open func dictionaryRepresentation() -> [Swift.String : Any]
  @objc final public let isFile: Swift.Bool
  @objc final public let isFolder: Swift.Bool
  @objc override convenience dynamic public init()
  @objc convenience public init(dictionary: [Swift.String : Any])
  @objc override dynamic open func copy() -> Any
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FIRStorageObservableTask) open class StorageObservableTask : FirebaseStorage.StorageTask {
  @discardableResult
  @objc(observeStatus:handler:) open func observe(_ status: FirebaseStorage.StorageTaskStatus, handler: @escaping (FirebaseStorage.StorageTaskSnapshot) -> Swift.Void) -> Swift.String
  @objc(removeObserverWithHandle:) open func removeObserver(withHandle handle: Swift.String)
  @objc(removeAllObserversForStatus:) open func removeAllObservers(for status: FirebaseStorage.StorageTaskStatus)
  @objc open func removeAllObservers()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FIRStorageReference) open class StorageReference : ObjectiveC.NSObject {
  @objc final public let storage: FirebaseStorage.Storage
  @objc final public let bucket: Swift.String
  @objc final public let fullPath: Swift.String
  @objc final public let name: Swift.String
  @objc open func root() -> FirebaseStorage.StorageReference
  @objc open func parent() -> FirebaseStorage.StorageReference?
  @objc(child:) open func child(_ path: Swift.String) -> FirebaseStorage.StorageReference
  @discardableResult
  @objc(putData:metadata:) open func putData(_ uploadData: Foundation.Data, metadata: FirebaseStorage.StorageMetadata? = nil) -> FirebaseStorage.StorageUploadTask
  @discardableResult
  @objc(putData:) open func __putData(_ uploadData: Foundation.Data) -> FirebaseStorage.StorageUploadTask
  @discardableResult
  @objc(putData:metadata:completion:) open func putData(_ uploadData: Foundation.Data, metadata: FirebaseStorage.StorageMetadata? = nil, completion: ((FirebaseStorage.StorageMetadata?, Swift.Error?) -> Swift.Void)?) -> FirebaseStorage.StorageUploadTask
  @discardableResult
  @objc(putFile:metadata:) open func putFile(from fileURL: Foundation.URL, metadata: FirebaseStorage.StorageMetadata? = nil) -> FirebaseStorage.StorageUploadTask
  @discardableResult
  @objc(putFile:) open func __putFile(from fileURL: Foundation.URL) -> FirebaseStorage.StorageUploadTask
  @discardableResult
  @objc(putFile:metadata:completion:) open func putFile(from fileURL: Foundation.URL, metadata: FirebaseStorage.StorageMetadata? = nil, completion: ((FirebaseStorage.StorageMetadata?, Swift.Error?) -> Swift.Void)?) -> FirebaseStorage.StorageUploadTask
  @discardableResult
  @objc(dataWithMaxSize:completion:) open func getData(maxSize: Swift.Int64, completion: @escaping ((Foundation.Data?, Swift.Error?) -> Swift.Void)) -> FirebaseStorage.StorageDownloadTask
  @objc(downloadURLWithCompletion:) open func downloadURL(completion: @escaping ((Foundation.URL?, Swift.Error?) -> Swift.Void))
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, tvOS 13, macOS 10.15, watchOS 8, *)
  open func downloadURL() async throws -> Foundation.URL
  #endif

  @discardableResult
  @objc(writeToFile:) open func write(toFile fileURL: Foundation.URL) -> FirebaseStorage.StorageDownloadTask
  @discardableResult
  @objc(writeToFile:completion:) open func write(toFile fileURL: Foundation.URL, completion: ((Foundation.URL?, Swift.Error?) -> Swift.Void)?) -> FirebaseStorage.StorageDownloadTask
  @objc(listAllWithCompletion:) open func listAll(completion: @escaping ((FirebaseStorage.StorageListResult?, Swift.Error?) -> Swift.Void))
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, tvOS 13, macOS 10.15, watchOS 8, *)
  open func listAll() async throws -> FirebaseStorage.StorageListResult
  #endif

  @objc(listWithMaxResults:completion:) open func list(maxResults: Swift.Int64, completion: @escaping ((FirebaseStorage.StorageListResult?, Swift.Error?) -> Swift.Void))
  @objc(listWithMaxResults:pageToken:completion:) open func list(maxResults: Swift.Int64, pageToken: Swift.String, completion: @escaping ((FirebaseStorage.StorageListResult?, Swift.Error?) -> Swift.Void))
  @objc(metadataWithCompletion:) open func getMetadata(completion: @escaping ((FirebaseStorage.StorageMetadata?, Swift.Error?) -> Swift.Void))
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, tvOS 13, macOS 10.15, watchOS 8, *)
  open func getMetadata() async throws -> FirebaseStorage.StorageMetadata
  #endif

  @objc(updateMetadata:completion:) open func updateMetadata(_ metadata: FirebaseStorage.StorageMetadata, completion: ((FirebaseStorage.StorageMetadata?, Swift.Error?) -> Swift.Void)?)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, tvOS 13, macOS 10.15, watchOS 8, *)
  open func updateMetadata(_ metadata: FirebaseStorage.StorageMetadata) async throws -> FirebaseStorage.StorageMetadata
  #endif

  @objc(deleteWithCompletion:) open func delete(completion: ((Swift.Error?) -> Swift.Void)?)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, tvOS 13, macOS 10.15, watchOS 8, *)
  open func delete() async throws
  #endif

  @objc open func copy(_ zone: ObjectiveC.NSZone) -> FirebaseStorage.StorageReference
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FIRStorageTask) open class StorageTask : ObjectiveC.NSObject {
  @objc public var snapshot: FirebaseStorage.StorageTaskSnapshot {
    @objc get
  }
  @objc deinit
}
@objc(FIRStorageTaskManagement) public protocol StorageTaskManagement : ObjectiveC.NSObjectProtocol {
  @objc func enqueue()
  @objc optional func pause()
  @objc optional func cancel()
  @objc optional func resume()
}
@_hasMissingDesignatedInitializers @objc(FIRStorageTaskSnapshot) open class StorageTaskSnapshot : ObjectiveC.NSObject {
  @objc final public let task: FirebaseStorage.StorageTask
  @objc final public let metadata: FirebaseStorage.StorageMetadata?
  @objc final public let reference: FirebaseStorage.StorageReference
  @objc final public let progress: Foundation.Progress?
  @objc final public let error: Swift.Error?
  @objc final public let status: FirebaseStorage.StorageTaskStatus
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FIRStorageUploadTask) open class StorageUploadTask : FirebaseStorage.StorageObservableTask, FirebaseStorage.StorageTaskManagement {
  @objc open func enqueue()
  @objc open func pause()
  @objc open func cancel()
  @objc open func resume()
  @objc deinit
}
extension FirebaseStorage.StorageTaskStatus : Swift.Equatable {}
extension FirebaseStorage.StorageTaskStatus : Swift.Hashable {}
extension FirebaseStorage.StorageTaskStatus : Swift.RawRepresentable {}
extension FirebaseStorage.StorageErrorCode : Swift.Equatable {}
extension FirebaseStorage.StorageErrorCode : Swift.Hashable {}
extension FirebaseStorage.StorageErrorCode : Swift.RawRepresentable {}
